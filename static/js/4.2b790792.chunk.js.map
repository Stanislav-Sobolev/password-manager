{"version":3,"sources":["components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Contacts/Contacts.jsx"],"names":["Filter","_ref","filterState","handleFilter","react_default","a","createElement","Fragment","type","name","value","onChange","e","target","ContactList","filteredArr","data","useGetContactsQuery","_useDeleteContactMuta","useDeleteContactMutation","deleteContact","Object","slicedToArray","map","item","key","id","PhoneBook_styled","number","onClick","schema","yup","shape","min","matches","required","ContactForm","initialValues","onSubmit","formik_esm","validationSchema","title","component","Error","propTypes","PropTypes","object","func","contacts","array","string","Contacts","_useState","useState","_useState3","_useState5","_useState6","filter","setFilter","items","_useAddContactMutatio","useAddContactMutation","addContact","handleSubmit","_ref2","asyncToGenerator","_regeneratorRuntime","mark","_callee","resetForm","newContact","wrap","_context","prev","next","find","el","toLowerCase","includes","sent","alert","concat","t0","message","stop","_x","_x2","apply","this","arguments","visibleContacts","ContactForm_ContactForm","Filter_Filter","ContactList_ContactList"],"mappings":"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","file":"static/js/4.2b790792.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Filter = ({ filterState, handleFilter }) => {\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filterState}\n        onChange={e => handleFilter(e.target.value)}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { ButtonStyled, ContactItem } from '../Contacts/PhoneBook.styled';\n\nimport { useGetContactsQuery, useDeleteContactMutation } from '../store';\n\nexport const ContactList = ({ filteredArr }) => {\n  const { data } = useGetContactsQuery();\n  const [deleteContact] = useDeleteContactMutation();\n\n  return (\n    <ul>\n      {data && (\n        <>\n          {filteredArr.map(item => (\n            <li key={item.id}>\n              <ContactItem>\n                {item.name}: {item.number}\n              </ContactItem>\n              <ButtonStyled onClick={() => deleteContact(item.id)}>\n                Delete\n              </ButtonStyled>\n            </li>\n          ))}\n        </>\n      )}\n    </ul>\n  );\n};\n","import React from 'react';\nimport * as yup from 'yup';\nimport { Formik, ErrorMessage } from 'formik';\nimport {\n  ButtonStyled,\n  FormStyled,\n  LabelStyled,\n  FieldStyled,\n  Error,\n} from '../Contacts/PhoneBook.styled';\n\nlet schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2)\n    .matches(\n      /^[aA-zZ\\s]+$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup.number().min(7).required(),\n});\n\nexport const ContactForm = ({ initialValues, onSubmit }) => {\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={schema}\n    >\n      <FormStyled>\n        <LabelStyled>\n          Name\n          <FieldStyled\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n          <ErrorMessage name=\"name\" component={Error} />\n        </LabelStyled>\n        <LabelStyled>\n          Number\n          <FieldStyled type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" component={Error} />\n        </LabelStyled>\n        <ButtonStyled type=\"submit\">Add Contact</ButtonStyled>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import React from 'react';\nimport { HeadTitle } from './PhoneBook.styled';\nimport { Filter } from '../Filter/Filter';\nimport { ContactList } from '../ContactList/ContactList';\nimport { ContactForm } from '../ContactForm/ContactForm';\nimport { useGetContactsQuery, useAddContactMutation } from '../store';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nconst Contacts = () => {\n  const [name] = useState('');\n  const [number] = useState('');\n  const [filter, setFilter] = useState('');\n\n  const { data: items } = useGetContactsQuery();\n  const [addContact] = useAddContactMutation();\n\n  const handleSubmit = async (e, { resetForm }) => {\n    try {\n      if (\n        await items.find(el =>\n          el.name.toLowerCase().includes(e.name.toLowerCase())\n        )\n      ) {\n        alert(`${e.name} is already in contacts.`);\n      } else {\n        const newContact = {\n          name: e.name,\n          number: e.number,\n        };\n\n        await addContact(newContact);\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n\n    resetForm();\n  };\n\n  const handleFilter = e => {\n    setFilter(e);\n  };\n\n  const getVisibleContacts = () => {\n    let result;\n    if (items) {\n      result = items.filter(el =>\n        el.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    } else {\n      result = items;\n    }\n\n    return result;\n  };\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <>\n\n      <HeadTitle>Phonebook</HeadTitle>\n\n      <ContactForm\n        initialValues={{ items, name, number }}\n        onSubmit={handleSubmit}\n      />\n      <HeadTitle>Contacts</HeadTitle>\n\n      <Filter filterState={filter} handleFilter={handleFilter} />\n\n      {items && <ContactList filteredArr={visibleContacts} />}\n    </>\n  );\n};\n\nContactForm.propTypes = {\n  initialValues: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n\nFilter.propTypes = {\n  contacts: PropTypes.array,\n  filterState: PropTypes.string,\n  handleFilter: PropTypes.func,\n};\n\nContactList.propTypes = {\n  filteredArr: PropTypes.array,\n};\n\nexport default Contacts;\n"],"sourceRoot":""}