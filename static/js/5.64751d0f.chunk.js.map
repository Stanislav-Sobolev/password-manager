{"version":3,"sources":["components/Filter/Filter.jsx","Redux/contactsSelectors.js","components/PasswordList/PasswordItem.jsx","components/PasswordList/PasswordList.jsx","components/PasswordForm/PasswordForm.jsx","components/Dashboard/Dashboard.jsx"],"names":["Filter","_ref","filterState","handleFilter","react_default","a","createElement","Fragment","InputLabel","Input","type","name","value","onChange","e","target","selectAllPasswords","state","passwords","items","PasswordItem","item","_useState","useState","_useState2","Object","slicedToArray","hidePass","setHidePass","dispatch","useDispatch","PasswordManager_styled","toHidePass","number","IconButton","onClick","size","VisibilityOff_default","style","fontSize","Visibility_default","deletePassword","id","DeleteOutlined_default","PasswordList","filteredArr","data","useSelector","map","PasswordItem_PasswordItem","key","schema","yup","shape","min","matches","required","pass","PasswordForm","onSubmit","password","showPassword","passwordShown","setPasswordShown","formik_esm","initialValues","validationSchema","component","Error","autoComplete","objectSpread","propTypes","PropTypes","object","func","array","string","Dashboard","filter","setFilter","useEffect","fetchPasswords","handleSubmit","_ref2","asyncToGenerator","_regeneratorRuntime","mark","_callee","resetForm","newPassword","wrap","_context","prev","next","find","el","toLowerCase","toast","error","concat","addPassword","t0","message","stop","_x","_x2","apply","this","arguments","visiblePasswords","includes","dist","PasswordForm_PasswordForm","Filter_Filter","PasswordList_PasswordList"],"mappings":"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","file":"static/js/5.64751d0f.chunk.js","sourcesContent":["import React from 'react';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nexport const Filter = ({ filterState, handleFilter }) => {\n  return (\n    <>\n      <InputLabel>Find website by name</InputLabel>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filterState}\n        onChange={e => handleFilter(e.target.value)}\n      />\n    </>\n  );\n};\n","export const selectLoading = state => state.passwords.loading;\n\nexport const selectFilter = state => state.passwords.filter;\n\nexport const selectError = state => state.auth.error;\n\nexport const selectAllPasswords = state => state.passwords.items;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deletePassword } from '../../Redux/contactsOperations';\nimport { useState } from 'react';\nimport {\n  PasswordItemWrapper,\n  StyledHidePass,\n  PasswordIconsWrapper,\n} from '../Dashboard/PasswordManager.styled';\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\nimport IconButton from '@material-ui/core/IconButton';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n\nexport const PasswordItem = ({ item }) => {\n  const [hidePass, setHidePass] = useState(true);\n\n  const dispatch = useDispatch();\n\n  const hidePassHandler = () => {\n    setHidePass(!hidePass);\n  };\n\n  return (\n    <PasswordIconsWrapper>\n      <PasswordItemWrapper>\n        {item.name}:&nbsp;\n        <StyledHidePass toHidePass={hidePass}>{item.number}</StyledHidePass>\n      </PasswordItemWrapper>\n      <div>\n        <IconButton onClick={hidePassHandler} size=\"small\">\n          {hidePass ? (\n            <VisibilityOff style={{ fontSize: '18px' }} />\n          ) : (\n            <Visibility style={{ fontSize: '18px' }} />\n          )}\n        </IconButton>\n        <IconButton\n          onClick={() => dispatch(deletePassword(item.id))}\n          size=\"small\"\n        >\n          <DeleteOutlinedIcon fontSize=\"small\" />\n        </IconButton>\n      </div>\n    </PasswordIconsWrapper>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectAllPasswords } from '../../Redux/contactsSelectors';\nimport { StyledList } from '../Dashboard/PasswordManager.styled';\nimport { PasswordItem } from './PasswordItem';\n\nexport const PasswordList = ({ filteredArr }) => {\n  const data = useSelector(selectAllPasswords);\n\n  return (\n    <StyledList>\n      {data && (\n        <>\n          {filteredArr.map(item => (\n            <PasswordItem key={item.id} item={item} />\n          ))}\n        </>\n      )}\n    </StyledList>\n  );\n};\n","import React from 'react';\nimport { useState } from 'react';\nimport * as yup from 'yup';\nimport { Formik, ErrorMessage } from 'formik';\nimport IconButton from '@material-ui/core/IconButton';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n\nimport {\n  ButtonStyled,\n  FormStyled,\n  LabelStyled,\n  FieldStyled,\n  Error,\n  PassFieldWrapper,\n} from '../Dashboard/PasswordManager.styled';\n\nlet schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'must be at least 2 characters long')\n    .matches(\n      /^[0-9aA-zZ.!@#$%^&*\\s]+$/,\n      'Name may contain only numbers, dot and letters. For example yoursite123.com'\n    )\n    .required(),\n  pass: yup.mixed().required(),\n});\n\nexport const PasswordForm = ({ onSubmit }) => {\n  const [passwordShown, setPasswordShown] = useState({\n    password: '',\n    showPassword: false,\n  });\n\n  const handleClickShowPassword = () => {\n    setPasswordShown({\n      ...passwordShown,\n      showPassword: !passwordShown.showPassword,\n    });\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', pass: '' }}\n      onSubmit={onSubmit}\n      validationSchema={schema}\n    >\n      <FormStyled>\n        <LabelStyled>Website</LabelStyled>\n        <FieldStyled type=\"text\" name=\"name\" />\n        <ErrorMessage name=\"name\" component={Error} />\n        <LabelStyled>Password</LabelStyled>\n        <PassFieldWrapper>\n          <FieldStyled\n            type={passwordShown.showPassword ? 'text' : 'password'}\n            name=\"pass\"\n            autoComplete=\"off\"\n          />\n          <IconButton onClick={handleClickShowPassword} size=\"small\">\n            {passwordShown.showPassword ? (\n              <Visibility style={{ fontSize: '18px' }} />\n            ) : (\n              <VisibilityOff style={{ fontSize: '18px' }} />\n            )}\n          </IconButton>\n        </PassFieldWrapper>\n        <ErrorMessage name=\"pass\" component={Error} />\n\n        <ButtonStyled type=\"submit\">Add Password</ButtonStyled>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import React from 'react';\nimport { HeadTitle, PasswordPageWrapper } from './PasswordManager.styled';\nimport { Filter } from '../Filter/Filter';\nimport { PasswordList } from '../PasswordList/PasswordList';\nimport { PasswordForm } from '../PasswordForm/PasswordForm';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAllPasswords } from '../../Redux/contactsSelectors';\nimport { addPassword, fetchPasswords } from '../../Redux/contactsOperations';\nimport toast, { Toaster } from 'react-hot-toast';\n\nimport { useEffect } from 'react';\n\nconst Dashboard = () => {\n  const [filter, setFilter] = useState('');\n\n  const dispatch = useDispatch();\n  const items = useSelector(selectAllPasswords);\n\n  useEffect(() => {\n    dispatch(fetchPasswords());\n  }, [dispatch]);\n\n  const handleSubmit = async (e, { resetForm }) => {\n    try {\n      if (items.find(el => el.name.toLowerCase() === e.name.toLowerCase())) {\n        toast.error(`${e.name} is already in passwords.`);\n      } else {\n        const newPassword = {\n          name: e.name,\n          number: e.pass,\n        };\n\n        await dispatch(addPassword(newPassword));\n      }\n    } catch (error) {\n      toast.error(`${error.message}`);\n    }\n\n    resetForm();\n  };\n\n  const handleFilter = e => {\n    setFilter(e);\n  };\n\n  const getVisiblePasswords = () => {\n    let result;\n    if (items) {\n      result = items.filter(el =>\n        el.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    } else {\n      result = items;\n    }\n\n    return result;\n  };\n\n  const visiblePasswords = getVisiblePasswords();\n\n  return (\n    <PasswordPageWrapper>\n      <Toaster />\n      <HeadTitle>Add Password</HeadTitle>\n\n      <PasswordForm onSubmit={handleSubmit} />\n      <HeadTitle>Passwords</HeadTitle>\n\n      <Filter filterState={filter} handleFilter={handleFilter} />\n\n      {items && <PasswordList filteredArr={visiblePasswords} />}\n    </PasswordPageWrapper>\n  );\n};\n\nPasswordForm.propTypes = {\n  initialValues: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n\nFilter.propTypes = {\n  passwords: PropTypes.array,\n  filterState: PropTypes.string,\n  handleFilter: PropTypes.func,\n};\n\nPasswordList.propTypes = {\n  filteredArr: PropTypes.array,\n};\n\nexport default Dashboard;\n"],"sourceRoot":""}